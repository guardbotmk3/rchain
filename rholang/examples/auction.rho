// Rholang equivalent of the Simple Open Auction http://solidity.readthedocs.io/en/develop/solidity-by-example.html#simple-open-auction
// The auction contract has three main actions: bid, withdraw, and auction_end (which ends the auction).
// This contract demonstrates the use of the primitive injectNow,
// which injects the current system time into the channel.
// The current time is then used to keep track of when
// the auction started, when the bid has come in, and when
// the call to end the auction has been made.

// This contract has not been formally verified!

new auction in {
    contract auction (beneficiary, bidding_time, return_channel) = {
        new auction_start_channel, highest_bidder_channel, highest_bid_channel, pending_returns_channel, ended_channel, now_channel in {
            ended_channel!(false) |
            highest_bidder_channel!("no one") |
            highest_bid_channel!(-1) |
            auction_start_channel.injectNow() |
            pending_returns_channel!(Map()) |

            new bid, withdraw, auction_end in {

                contract bid(message_sender, amount, rtn) = {
                    now_channel.injectNow() |
                    for (now <- now_channel; highest_bidder <- highest_bidder_channel; highest_bid <- highest_bid_channel; auction_start <- auction_start_channel) {
                        match [now <= auction_start + bidding_time, amount > highest_bid] with
                            [true, true] => {
                                match [highest_bidder != 0] with
                                    [true] => {
                                        for (pending_returns <- pending_returns_channel) {
                                            pending_returns_channel!(
                                                pending_returns.insert(highest_bidder,
                                                    pending_returns.getOrElse(highest_bidder, 0) + highest_bid)
                                            )
                                        }
                                    }
                                    _ => {
                                        Nil
                                    } |
                                highest_bidder_channel!(message_sender) |
                                highest_bid_channel!(amount) |
                                auction_start_channel!(auction_start) |
                                rtn!(true)
                                // TODO: Send event equivalent
                            }
                            _ => {
                                highest_bidder_channel!(highest_bidder) |
                                highest_bid_channel!(highest_bid) |
                                auction_start_channel!(auction_start) |
                                rtn!(false)
                            }
                    }
                } |

                contract withdraw(message_sender, rtn) = {
                    for (pending_returns <- pending_returns_channel) {
                        match pending_returns.get(message_sender) > 0 with
                            true => {
                                // TODO: Implement polymorphic ! to actually transfer the amount of the native token
                                message_sender!(pending_returns.get(message_sender)) |
                                pending_returns_channel!(pending_returns.insert(message_sender, 0)) |
                                rtn!(true)
                            }
                            _ => {
                                pending_returns_channel!(pending_returns) |
                                rtn!(false)
                            }
                    }
                } |

                contract auction_end(message_sender, rtn) = {
                    now_channel.injectNow() |
                    for (now <- now_channel;  auction_start <- auction_start_channel; ended <- ended_channel; highest_bid <- highest_bid_channel) {
                        match [now >= auction_start + bidding_time, ended != true] with
                            [true, true] => {
                                ended_channel!(true) |
                                auction_start_channel!(auction_start) |
                                highest_bid_channel!(highest_bid) |
                                // TODO: Implement polymorphic ! to actually transfer the amount of the native token
                                beneficiary!(highest_bid) |
                                rtn!(true)
                            }
                            _ => {
                                ended_channel!(false) |
                                auction_start_channel!(auction_start) |
                                highest_bid_channel!(highest_bid) |
                                rtn!(false)
                            }
                    }
                } |
                return_channel!(
                    Map().insertMany("bid", bid, "withdraw", withdraw,
                        "auction_end", auction_end)
                )
            }
        }
    } |

    // Example code to
    // (1) instantiate the auction contract
    // (2) send in two bids
    // (3) end the auction
    // (4) check the beneficiaries' balance
    //
    // See tests/auction_tests.rho to see more calls
    new rtn, me, bidder_one, bidder_two, unused_rtn in {
        auction!(me, 0, rtn) | // Note bidding time of 0 means anyone can immediately end the auction
        for (auction_contract <- rtn) {
            @auction_contract.get("bid")!(bidder_one, 100, unused_rtn) |
            for (_ <- unused_rtn) { // Ensures sequential bid
                @auction_contract.get("bid")!(bidder_two, 200, unused_rtn) |
                for (_ <- unused_rtn) { // Ensures auction end happens after bids
                    @auction_contract.get("auction_end")!(me, unused_rtn) |
                    for (me_balance <- me) { me_balance.display("\n") }
                }
            } |
            rtn!(auction_contract)
        }
    }
}
